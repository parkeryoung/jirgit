#!/usr/bin/env ruby

require 'jiragit'

@log = Jiragit::Logger.new(".git/jiragit/hooks.log")
@log.hook = File.basename $0
@log.level = Logger::DEBUG

@log.debug "launched"
STDIN.reopen('/dev/tty')

def commit_source
  ARGV[1]
end

def commit_message
  message = File.read(ARGV[0])
  @log.debug "#{__method__}\n#{message}"
  message
end

def write_commit_message(message)
  @log.debug "#{__method__}\n#{message}"
  File.write(ARGV[0], message)
end

def specified_commit_message_on_command_line?
  @log.debug "#{__method__} #{commit_source == 'message'}"
  commit_source == 'message'
end

def has_existing_commit_message?
  @log.debug "#{__method__} #{commit_source == 'commit'}"
  commit_source == 'commit'
end

def is_a_merge_commit?
  @log.debug "#{__method__} #{commit_source == 'merge'}"
  commit_source == 'merge'
end

def is_a_squash_commit?
  @log.debug "#{__method__} #{commit_source == 'squash'}"
  commit_source == 'squash'
end

def should_modify_commit_message?
  modify = !(has_existing_commit_message? || is_a_squash_commit?)
  @log.debug "#{__method__} #{modify}"
  modify
end

def current_branch
  branch = Jiragit::Git.current_branch
  @log.debug "#{__method__} #{branch}"
  branch
end

def merge_branch
  commit_message.match(/Merge branch '(.*?)'/)
  @log.debug "#{__method__} #{$1}"
  $1
end

def jira_store
  @jira_store ||= Jiragit::JiraStore.new(".git/jiragit/jira_store")
end

def related_jiras(params)
  jira_store
    .relations(params)
    .to_a
    .select { |r| r.type == :jira }
    .map(&:label)
end

def prepend_to_commit_message(line)
  write_commit_message(line+"\n"+commit_message)
end

def append_to_commit_message(line)
  write_commit_message(commit_message+"\n"+line)
end

def append_jiras_to_commit_message
  jiras = related_jiras(branch: current_branch)
  return if jiras.empty?

  append_to_commit_message "\n"
  jiras.each do |jira|
    append_to_commit_message "#{jira}: https://peopleadmin.atlassian.net/browse/#{jira}"
  end
end

def append_merge_jiras_to_commit_message
  jiras = related_jiras(branch: merge_branch)
  return if jiras.empty?

  append_to_commit_message "Merged JIRA(s)"
  jiras.each do |jira|
    append_to_commit_message "#{jira}: https://peopleadmin.atlassian.net/browse/#{jira}"
  end
end

def prepend_jiras_to_commit_message
  jiras = related_jiras(branch: current_branch)
  return if jiras.empty?

  jiras.each do |jira|
    prepend_to_commit_message "#{jira}: https://peopleadmin.atlassian.net/browse/#{jira}"
  end
  prepend_to_commit_message "\n"
end

def prepend_line_length_guide
  prepend_to_commit_message "\n#------------------------------------------------#---------------------#"
end

exit(0) unless should_modify_commit_message?

case
when specified_commit_message_on_command_line?
  append_jiras_to_commit_message

when is_a_merge_commit?
  append_jiras_to_commit_message
  append_merge_jiras_to_commit_message

else
  prepend_line_length_guide
  prepend_jiras_to_commit_message
end
