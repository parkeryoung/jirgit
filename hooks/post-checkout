#!/usr/bin/env ruby

require 'jiragit'

log = Jiragit::Logger.new(".git/jiragit/hooks.log")
log.hook = File.basename $0
log.info "launched"

STDIN.reopen('/dev/tty')

def previous_head
  ARGV[0]
end

def new_head
  ARGV[1]
end

def branch_switch?
  ARGV[2] == '1'
end

def current_branch
  Jiragit::Git.current_branch
end

def previous_branch
  Jiragit::Git.previous_branch
end

def new_branch?
  current_branch != previous_branch
end

def detached_head
  current_branch==''
end

def master_branch
  current_branch=='master'
end

def query(message, default=nil)
  if default
    print "#{message} [#{default}]> "
  else
    print "#{message} > "
  end
  response = STDIN.gets.chomp
  if response.empty? && default
    default
  else
    response
  end
end

def message(message)
  puts message
  log.info message
end

def jira_store
  @jira_store ||= Jiragit::JiraStore.new(".git/jiragit/jira_store")
end

def related_jiras(params)
  jira_store
    .relations(params)
    .to_a
    .select { |r| r.type == :jira }
    .map(&:label)
end

def relate_jiras_to_current_branch(jiras)
  return if jiras.empty?
  jiras.gsub(/\s/,'').split(',').each do |jira|
    jira_store.relate(jira: jira, branch: current_branch) unless jira.empty?
  end
end

def message_jiras_related_to_current_branch
  message("JIRA(s): #{related_jiras(branch: current_branch).join(', ')}")
end

def query_for_related_jiras
  default = related_jiras(branch: previous_branch).join(', ') if new_branch?
  query("What is the JIRA Number?", default)
end

exit(1) if detached_head || master_branch

if related_jiras(branch: current_branch).any?

  message_jiras_related_to_current_branch

else

  jiras = query_for_related_jiras
  relate_jiras_to_current_branch(jiras)

end




